name: 'Terraform CI/CD'

on:
  push:
    branches:
      - 'main'
      - 'stage'
  pull_request:
    branches:
      - 'main'
    paths-ignore:
      - '**/stage-terraform.yml'
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Confirm if you want to destroy the Terraform backend (type DESTROY to confirm)'
        required: true
        default: 'CANCEL'

env:
  AWS_REGION: ap-northeast-2

jobs:
  terraform:
    name: 'Terraform Setup & Deploy' # destroy 때는 작동 안 하게 조건 추가
    if: github.event.inputs.confirm_destroy != 'DESTROY' || github.event.inputs.confirm_destroy == null
    runs-on: ubuntu-latest
    environment: stage
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check and Initialize Terraform Backend
        run: |
          check_bucket_exists() {
              BUCKET_NAME="$1"
              output=$(aws s3 ls "s3://$BUCKET_NAME" 2>&1)
              if echo "$output" | grep -q 'NoSuchBucket'; then
                  echo "false"
              elif echo "$output" | grep -q 'Access Denied'; then
                  echo "access denied"
              else
                  echo "true"
              fi
          }

          check_dynamodb_exists() {
              TABLE_NAME="$1"
              output=$(aws dynamodb describe-table --table-name "$TABLE_NAME" 2>&1)
              if echo "$output" | grep -q 'ResourceNotFoundException'; then
                  echo "false"
              elif echo "$output" | grep -q 'AccessDeniedException'; then
                  echo "access denied"
              else
                  echo "true"
              fi
          }

          S3_BUCKET="jihoo-terraform-state"
          DYNAMODB_TABLE="jihoo-terraform-state"

          BUCKET_EXISTS=$(check_bucket_exists "$S3_BUCKET")
          DYNAMODB_EXISTS=$(check_dynamodb_exists "$DYNAMODB_TABLE")

          if [ -d backend ]; then
              cd backend
          else
              echo "backend 디렉토리가 없습니다."
              exit 1
          fi

          if [ "$BUCKET_EXISTS" = "true" ] && [ "$DYNAMODB_EXISTS" = "true" ]; then
              echo "S3와 DynamoDB가 존재합니다. Terraform init 생략"
          elif [ "$BUCKET_EXISTS" = "access denied" ] || [ "$DYNAMODB_EXISTS" = "access denied" ]; then
              echo "자격 증명 문제 발생"
              exit 1
          else
              echo "S3 또는 DynamoDB가 없어 생성을 진행합니다"
              terraform init
              terraform apply -auto-approve
          fi

      - name: Terraform Plan & Apply (Main Infra)
        run: |
          cd terraform_stage
          terraform init \
            -backend-config="region=ap-northeast-2" \
            -backend-config="bucket=jihoo-terraform-state" \
            -backend-config="key=stage/terraform/terraform.tfstate"

          terraform plan -input=false
          terraform apply -auto-approve -input=false

  destroy:
    name: Terraform Destroy
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.confirm_destroy == 'DESTROY'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init for Destroy
        run: |
          cd terraform_stage
          terraform init \
            -backend-config="region=ap-northeast-2" \
            -backend-config="bucket=jihoo-terraform-state" \
            -backend-config="key=stage/terraform/terraform.tfstate"

      - name: Terraform Destroy
        run: |
          terraform destroy -auto-approve
