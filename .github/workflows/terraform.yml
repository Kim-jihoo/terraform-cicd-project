name: 'Terraform CI/CD'

on:
  push:
    branches:
      - 'main'
      - 'dev'
  pull_request:
    branches:
      - 'main'
    paths-ignore:
      - '**/dev-terraform.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Which environment to destroy? (dev or prod)'
        required: true
        default: 'dev'
      confirm_destroy:
        description: 'Type DESTROY to confirm'
        required: true
        default: 'DESTROY'

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET: jihoo-terraform-state
  DYNAMODB_TABLE: jihoo-terraform-state
  ALB_LOG_BUCKET: jihoo-alb-access-logs

jobs:
  backend_setup:
    name: 'Check & Create Backend Resources'
    if: github.event.inputs.confirm_destroy != 'DESTROY' || github.event.inputs.confirm_destroy == null
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check and Initialize Terraform Backend
        run: |
          check_bucket_exists() {
            BUCKET_NAME="$1"
            aws s3api head-bucket --bucket "$BUCKET_NAME" >/dev/null 2>&1
            if [ $? -eq 0 ]; then echo "true"
            else echo "false"
            fi
          }

          check_dynamodb_exists() {
            TABLE_NAME="$1"
            output=$(aws dynamodb describe-table --table-name "$TABLE_NAME" 2>&1)
            if echo "$output" | grep -q 'ResourceNotFoundException'; then echo "false"
            elif echo "$output" | grep -q 'AccessDeniedException'; then echo "access denied"
            else echo "true"
            fi
          }

          BUCKET_EXISTS=$(check_bucket_exists "$S3_BUCKET")
          DYNAMODB_EXISTS=$(check_dynamodb_exists "$DYNAMODB_TABLE")
          ALB_BUCKET_EXISTS=$(check_bucket_exists "$ALB_LOG_BUCKET")

          if [ -d backend ]; then cd backend
          else echo "backend 디렉토리가 없습니다." && exit 1
          fi

          if [ "$BUCKET_EXISTS" = "true" ] && [ "$DYNAMODB_EXISTS" = "true" ]; then
            echo "S3와 DynamoDB가 이미 존재합니다. 생성 생략"
          elif [ "$BUCKET_EXISTS" = "access denied" ] || [ "$DYNAMODB_EXISTS" = "access denied" ]; then
            echo "자격 증명 문제 발생" && exit 1
          else
            echo "S3 또는 DynamoDB가 없어 생성합니다"
            terraform init
            terraform apply -auto-approve
          fi

          if [ "$ALB_BUCKET_EXISTS" = "true" ]; then
            echo "ALB 로그용 S3 버킷이 이미 존재합니다. 생성 생략"
          else
            echo "ALB 로그용 S3 버킷을 생성합니다"
            terraform init
            terraform apply -target=aws_s3_bucket.alb_logs -auto-approve
          fi

  terraform_dev:
    name: 'Terraform Apply (Dev)'
    needs: backend_setup
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Plan & Apply (Dev)
        run: |
          cd terraform_dev
          terraform init \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="bucket=${{ env.S3_BUCKET }}" \
            -backend-config="key=dev/terraform/terraform.tfstate"
          terraform plan -input=false
          terraform apply -auto-approve -input=false

  terraform_prod:
    name: 'Terraform Apply (Prod)'
    needs: [backend_setup, terraform_dev]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Plan & Apply (Prod)
        run: |
          cd terraform_prod
          terraform init \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="bucket=${{ env.S3_BUCKET }}" \
            -backend-config="key=prod/terraform/terraform.tfstate"
          terraform plan -input=false
          terraform apply -auto-approve -input=false

  destroy:
    name: Terraform Destroy
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.confirm_destroy == 'DESTROY'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Destroy
        run: |
          cd terraform_${{ github.event.inputs.environment }}
          terraform init \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="bucket=${{ env.S3_BUCKET }}" \
            -backend-config="key=${{ github.event.inputs.environment }}/terraform/terraform.tfstate"
          terraform destroy -auto-approve
